// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SWP391.CHCQS.DataAccess.Data;

#nullable disable

namespace SWP391.CHCQS.DataAccess.Migrations
{
    [DbContext(typeof(SWP391DBContext))]
    [Migration("20240215164651_DumplingStaff-CustomQuotation-RequestFormTable")]
    partial class DumplingStaffCustomQuotationRequestFormTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RequestFormMaterial", b =>
                {
                    b.Property<string>("RequestId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("requestId")
                        .IsFixedLength();

                    b.Property<string>("MaterialId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("materialId")
                        .IsFixedLength();

                    b.HasKey("RequestId", "MaterialId")
                        .HasName("PK__RequestF__2A5EBB0EE35F5BBE");

                    b.HasIndex("MaterialId");

                    b.ToTable("RequestFormMaterial", (string)null);
                });

            modelBuilder.Entity("StandardQuotationMaterial", b =>
                {
                    b.Property<string>("QuotationId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("quotationId")
                        .IsFixedLength();

                    b.Property<string>("MaterialId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("materialId")
                        .IsFixedLength();

                    b.HasKey("QuotationId", "MaterialId")
                        .HasName("PK__Standard__BCAD866D662F5E93");

                    b.HasIndex("MaterialId");

                    b.ToTable("StandardQuotationMaterial", (string)null);
                });

            modelBuilder.Entity("StandardQuotationTask", b =>
                {
                    b.Property<string>("QuotationId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("quotationId")
                        .IsFixedLength();

                    b.Property<string>("TaskId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("taskId")
                        .IsFixedLength();

                    b.HasKey("QuotationId", "TaskId")
                        .HasName("PK__Standard__48E336F665A8BFCB");

                    b.HasIndex("TaskId");

                    b.ToTable("StandardQuotationTask", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Account", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("username");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("role");

                    b.HasKey("Username")
                        .HasName("PK__Account__F3DBC5731230846A");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            Username = "thao123",
                            Password = "1",
                            Role = "customer"
                        },
                        new
                        {
                            Username = "maitran1",
                            Password = "1",
                            Role = "customer"
                        },
                        new
                        {
                            Username = "lvm123",
                            Password = "1",
                            Role = "customer"
                        },
                        new
                        {
                            Username = "ngocanh85",
                            Password = "1",
                            Role = "customer"
                        },
                        new
                        {
                            Username = "dtuan",
                            Password = "1",
                            Role = "customer"
                        },
                        new
                        {
                            Username = "datnt",
                            Password = "1",
                            Role = "engineer"
                        },
                        new
                        {
                            Username = "datnx",
                            Password = "1",
                            Role = "manager"
                        },
                        new
                        {
                            Username = "duclm",
                            Password = "1",
                            Role = "seller"
                        });
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.BasementType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id");

                    b.ToTable("BasementType", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.ConstructDetail", b =>
                {
                    b.Property<string>("QuotationId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("quotationId")
                        .IsFixedLength();

                    b.Property<string>("Alley")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("alley");

                    b.Property<bool>("Balcony")
                        .HasColumnType("bit")
                        .HasColumnName("balcony");

                    b.Property<string>("BasementId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("basementId")
                        .IsFixedLength();

                    b.Property<string>("ConstructionId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("constructionId")
                        .IsFixedLength();

                    b.Property<int>("Facade")
                        .HasColumnType("int")
                        .HasColumnName("facade");

                    b.Property<int>("Floor")
                        .HasColumnType("int")
                        .HasColumnName("floor");

                    b.Property<string>("FoundationId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("foundationId")
                        .IsFixedLength();

                    b.Property<decimal>("Garden")
                        .HasColumnType("decimal(6,1)")
                        .HasColumnName("garden");

                    b.Property<string>("InvestmentId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("investmentId")
                        .IsFixedLength();

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("length");

                    b.Property<decimal>("Mezzanine")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("mezzanine");

                    b.Property<decimal>("RooftopFloor")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("rooftopFloor");

                    b.Property<string>("RooftopId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("rooftopId")
                        .IsFixedLength();

                    b.Property<int>("Room")
                        .HasColumnType("int")
                        .HasColumnName("room");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("width");

                    b.HasKey("QuotationId")
                        .HasName("PK__Construc__7536E3527BF2F7DA");

                    b.HasIndex("BasementId");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("FoundationId");

                    b.HasIndex("InvestmentId");

                    b.HasIndex("RooftopId");

                    b.ToTable("ConstructDetail", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.ConstructionType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ConstructionType", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNum")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phoneNum");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ID001",
                            Name = "Nguyễn Trần Phương Thảo",
                            Username = "thao123"
                        },
                        new
                        {
                            Id = "ID002",
                            Name = "Trần Thị Mai",
                            Username = "maitran1"
                        },
                        new
                        {
                            Id = "ID003",
                            Name = "Lê Văn Minh",
                            Username = "lvm123"
                        },
                        new
                        {
                            Id = "ID004",
                            Name = "Ngọc Anh Nguyễn",
                            Username = "ngocanh85"
                        },
                        new
                        {
                            Id = "ID005",
                            Name = "Đỗ Minh Tuấn",
                            Username = "dtuan"
                        });
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.CustomQuotaionTask", b =>
                {
                    b.Property<string>("TaskId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("taskId")
                        .IsFixedLength();

                    b.Property<string>("QuotationId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("quotationId")
                        .IsFixedLength();

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("TaskId", "QuotationId")
                        .HasName("PK__CustomQu__EA0E34779FFE6727");

                    b.HasIndex("QuotationId");

                    b.ToTable("CustomQuotaionTask", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.CustomQuotation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Acreage")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("acreage");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("EngineerId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("engineerId")
                        .IsFixedLength();

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("location");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("managerId")
                        .IsFixedLength();

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("requestId")
                        .IsFixedLength();

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("sellerId")
                        .IsFixedLength();

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("money")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("EngineerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SellerId");

                    b.ToTable("CustomQuotation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "CQ001",
                            Acreage = "240m2",
                            Date = new DateTime(2024, 2, 15, 23, 46, 51, 457, DateTimeKind.Local).AddTicks(7553),
                            Description = "I want to build this house for my son and his wife, so i can live with them",
                            EngineerId = "EN001",
                            Location = "Dĩ An, Bình Dương",
                            ManagerId = "MG001",
                            RequestId = "RF001",
                            SellerId = "SL001",
                            Status = true,
                            Total = 0m
                        });
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.FoundationType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("AreaRatio")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("areaRatio");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id");

                    b.ToTable("FoundationType", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.InvestmentType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("InvestmentType", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Material", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("categoryId")
                        .IsFixedLength();

                    b.Property<int>("InventoryQuantity")
                        .HasColumnType("int")
                        .HasColumnName("inventoryQuantity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("unit");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Material", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.MaterialCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("MaterialCategory", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.MaterialDetail", b =>
                {
                    b.Property<string>("QuotationId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("quotationId")
                        .IsFixedLength();

                    b.Property<string>("MaterialId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("materialId")
                        .IsFixedLength();

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("QuotationId", "MaterialId")
                        .HasName("PK__Material__BCAD866D29D0C3FC");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialDetail", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Pricing", b =>
                {
                    b.Property<string>("ConstructTypeId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("ConstructTypeID")
                        .IsFixedLength();

                    b.Property<string>("InvestmentTypeId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("InvestmentTypeID")
                        .IsFixedLength();

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ConstructTypeId", "InvestmentTypeId")
                        .HasName("PK__Pricing__82221887E948CB0C");

                    b.HasIndex("InvestmentTypeId");

                    b.ToTable("Pricing", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("customerId")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scale")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("scale");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("size");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Project", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "PRJ01",
                            CustomerId = "ID001",
                            Description = "Nhà ở gia đình",
                            Location = "Phường Hố Nai, thành phố Biên Hòa, tỉnh Đồng Nai",
                            Name = "NHÀ PHỐ CHỊ THẢO TẠI ĐỒNG NAI",
                            Scale = "1 trệt, 2 lầu",
                            Size = "5x12",
                            Status = true
                        },
                        new
                        {
                            Id = "PRJ02",
                            CustomerId = "ID002",
                            Description = "Nhà ở gia đình",
                            Location = "huyện Bến Lức, tỉnh Long An",
                            Name = "NHÀ PHỐ CHỊ MAI",
                            Scale = "1 trệt, 2 lầu, sân thượng",
                            Size = "5x21",
                            Status = true
                        },
                        new
                        {
                            Id = "PRJ03",
                            CustomerId = "ID003",
                            Description = "Nhà ở gia đình",
                            Location = "Phường An Phú Đông, Quận 12",
                            Name = "NHÀ PHỐ HIỆN ĐẠI 5 TẦNG CỦA ANH MINH",
                            Scale = "1 trệt + 1 lửng + 2 lầu + 1 tum, sân thượng",
                            Size = "4.5x18",
                            Status = true
                        },
                        new
                        {
                            Id = "PRJ04",
                            CustomerId = "ID004",
                            Description = "Nhà ở gia đình",
                            Location = "Phường Hiệp Bình Chánh, TP. Thủ Đức",
                            Name = "NHÀ CHỊ NGỌC ANH",
                            Scale = "1 trệt + 2 lầu + 1 tum, sân thượng",
                            Size = "4.35x19.5",
                            Status = true
                        },
                        new
                        {
                            Id = "PRJ05",
                            CustomerId = "ID005",
                            Description = "Nhà ở gia đình",
                            Location = "Quận 5, TP. HCM",
                            Name = "NHÀ 1 TRỆT 3 LẦU ANH TUẤN ",
                            Scale = "Nhà 1 trệt 3 lầu có sân thượng",
                            Size = "4x17",
                            Status = true
                        });
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.RequestForm", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Acreage")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("acreage");

                    b.Property<string>("ConstructType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("constructType");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("customerId")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("GenerateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("generateDate");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("location");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("RequestForm", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "RF001",
                            Acreage = "240m2",
                            ConstructType = "CT2",
                            CustomerId = "ID001",
                            Description = "Customer said that this project must be finished on 3 month",
                            GenerateDate = new DateTime(2024, 2, 15, 23, 46, 51, 457, DateTimeKind.Local).AddTicks(7517),
                            Location = "Dĩ An, Bình Dương",
                            Status = true
                        });
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.RooftopType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id");

                    b.ToTable("RooftopType", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("gender");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("managerId")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNum")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phoneNum");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Username");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = "MG001",
                            Email = "datnx@gmail.com",
                            Gender = "Men",
                            Name = "Nguyen Xuan Dat",
                            PhoneNum = "0987654321",
                            Status = true,
                            Username = "datnx"
                        },
                        new
                        {
                            Id = "SL001",
                            Email = "duclm@gmail.com",
                            Gender = "Men",
                            ManagerId = "MG001",
                            Name = "Le Minh Duc",
                            PhoneNum = "0987654321",
                            Status = true,
                            Username = "duclm"
                        },
                        new
                        {
                            Id = "EN001",
                            Email = "datnt@gmail.com",
                            Gender = "Men",
                            ManagerId = "MG001",
                            Name = "Nguyen Thanh Dat",
                            PhoneNum = "0987654321",
                            Status = true,
                            Username = "datnt"
                        });
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.StandardQuotation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("ConstructionId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("constructionId")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionId");

                    b.ToTable("StandardQuotation", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Task", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("categoryId")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.TaskCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("TaskCategory", (string)null);
                });

            modelBuilder.Entity("RequestFormMaterial", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK__RequestFo__mater__5CD6CB2B");

                    b.HasOne("SWP391.CHCQS.Model.RequestForm", null)
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK__RequestFo__reque__619B8048");
                });

            modelBuilder.Entity("StandardQuotationMaterial", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK__StandardQ__mater__619B8048");

                    b.HasOne("SWP391.CHCQS.Model.StandardQuotation", null)
                        .WithMany()
                        .HasForeignKey("QuotationId")
                        .IsRequired()
                        .HasConstraintName("FK__StandardQ__quota__66603565");
                });

            modelBuilder.Entity("StandardQuotationTask", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.StandardQuotation", null)
                        .WithMany()
                        .HasForeignKey("QuotationId")
                        .IsRequired()
                        .HasConstraintName("FK__StandardQ__quota__6754599E");

                    b.HasOne("SWP391.CHCQS.Model.Task", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK__StandardQ__taskI__6477ECF3");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.ConstructDetail", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.BasementType", "Basement")
                        .WithMany("ConstructDetails")
                        .HasForeignKey("BasementId")
                        .IsRequired()
                        .HasConstraintName("FK__Construct__basem__4D94879B");

                    b.HasOne("SWP391.CHCQS.Model.ConstructionType", "Construction")
                        .WithMany("ConstructDetails")
                        .HasForeignKey("ConstructionId")
                        .IsRequired()
                        .HasConstraintName("FK__Construct__const__4E88ABD4");

                    b.HasOne("SWP391.CHCQS.Model.FoundationType", "Foundation")
                        .WithMany("ConstructDetails")
                        .HasForeignKey("FoundationId")
                        .IsRequired()
                        .HasConstraintName("FK__Construct__found__4D94879B");

                    b.HasOne("SWP391.CHCQS.Model.InvestmentType", "Investment")
                        .WithMany("ConstructDetails")
                        .HasForeignKey("InvestmentId")
                        .IsRequired()
                        .HasConstraintName("FK__Construct__inves__5070F446");

                    b.HasOne("SWP391.CHCQS.Model.CustomQuotation", "Quotation")
                        .WithOne("ConstructDetail")
                        .HasForeignKey("SWP391.CHCQS.Model.ConstructDetail", "QuotationId")
                        .IsRequired()
                        .HasConstraintName("FK__Construct__quota__5165187F");

                    b.HasOne("SWP391.CHCQS.Model.RooftopType", "Rooftop")
                        .WithMany("ConstructDetails")
                        .HasForeignKey("RooftopId")
                        .IsRequired()
                        .HasConstraintName("FK__Construct__rooft__52593CB8");

                    b.Navigation("Basement");

                    b.Navigation("Construction");

                    b.Navigation("Foundation");

                    b.Navigation("Investment");

                    b.Navigation("Quotation");

                    b.Navigation("Rooftop");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Customer", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.Account", "UsernameNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("Username")
                        .IsRequired()
                        .HasConstraintName("FK__Customer__userna__534D60F1");

                    b.Navigation("UsernameNavigation");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.CustomQuotaionTask", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.CustomQuotation", "Quotation")
                        .WithMany("CustomQuotaionTasks")
                        .HasForeignKey("QuotationId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomQuo__quota__5441852A");

                    b.HasOne("SWP391.CHCQS.Model.Task", "Task")
                        .WithMany("CustomQuotaionTasks")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomQuo__taskI__534D60F1");

                    b.Navigation("Quotation");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.CustomQuotation", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.Staff", "Engineer")
                        .WithMany("CustomQuotationEngineers")
                        .HasForeignKey("EngineerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomQuo__engin__5629CD9C");

                    b.HasOne("SWP391.CHCQS.Model.Staff", "Manager")
                        .WithMany("CustomQuotationManagers")
                        .HasForeignKey("ManagerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomQuo__manag__571DF1D5");

                    b.HasOne("SWP391.CHCQS.Model.RequestForm", "Request")
                        .WithMany("CustomQuotations")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomQuo__reque__5812160E");

                    b.HasOne("SWP391.CHCQS.Model.Staff", "Seller")
                        .WithMany("CustomQuotationSellers")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomQuo__selle__59063A47");

                    b.Navigation("Engineer");

                    b.Navigation("Manager");

                    b.Navigation("Request");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Material", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.MaterialCategory", "Category")
                        .WithMany("Materials")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Material__catego__5812160E");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.MaterialDetail", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.Material", "Material")
                        .WithMany("MaterialDetails")
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK__MaterialD__mater__59063A47");

                    b.HasOne("SWP391.CHCQS.Model.CustomQuotation", "Quotation")
                        .WithMany("MaterialDetails")
                        .HasForeignKey("QuotationId")
                        .IsRequired()
                        .HasConstraintName("FK__MaterialD__quota__5BE2A6F2");

                    b.Navigation("Material");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Pricing", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.ConstructionType", "ConstructType")
                        .WithMany("Pricings")
                        .HasForeignKey("ConstructTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Pricing__Constru__5CD6CB2B");

                    b.HasOne("SWP391.CHCQS.Model.InvestmentType", "InvestmentType")
                        .WithMany("Pricings")
                        .HasForeignKey("InvestmentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Pricing__Investm__5DCAEF64");

                    b.Navigation("ConstructType");

                    b.Navigation("InvestmentType");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Project", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Project__custome__5AEE82B9");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.RequestForm", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.Customer", "Customer")
                        .WithMany("RequestForms")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__RequestFo__custo__5FB337D6");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Staff", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.Staff", "Manager")
                        .WithMany("InverseManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK__Staff__managerId__628FA481");

                    b.HasOne("SWP391.CHCQS.Model.Account", "UsernameNavigation")
                        .WithMany("Staff")
                        .HasForeignKey("Username")
                        .IsRequired()
                        .HasConstraintName("FK__Staff__username__6383C8BA");

                    b.Navigation("Manager");

                    b.Navigation("UsernameNavigation");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.StandardQuotation", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.ConstructionType", "Construction")
                        .WithMany("StandardQuotations")
                        .HasForeignKey("ConstructionId")
                        .IsRequired()
                        .HasConstraintName("FK__StandardQ__const__6477ECF3");

                    b.Navigation("Construction");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Task", b =>
                {
                    b.HasOne("SWP391.CHCQS.Model.TaskCategory", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Task__categoryId__656C112C");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Account", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.BasementType", b =>
                {
                    b.Navigation("ConstructDetails");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.ConstructionType", b =>
                {
                    b.Navigation("ConstructDetails");

                    b.Navigation("Pricings");

                    b.Navigation("StandardQuotations");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Customer", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("RequestForms");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.CustomQuotation", b =>
                {
                    b.Navigation("ConstructDetail");

                    b.Navigation("CustomQuotaionTasks");

                    b.Navigation("MaterialDetails");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.FoundationType", b =>
                {
                    b.Navigation("ConstructDetails");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.InvestmentType", b =>
                {
                    b.Navigation("ConstructDetails");

                    b.Navigation("Pricings");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Material", b =>
                {
                    b.Navigation("MaterialDetails");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.MaterialCategory", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.RequestForm", b =>
                {
                    b.Navigation("CustomQuotations");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.RooftopType", b =>
                {
                    b.Navigation("ConstructDetails");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Staff", b =>
                {
                    b.Navigation("CustomQuotationEngineers");

                    b.Navigation("CustomQuotationManagers");

                    b.Navigation("CustomQuotationSellers");

                    b.Navigation("InverseManager");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.Task", b =>
                {
                    b.Navigation("CustomQuotaionTasks");
                });

            modelBuilder.Entity("SWP391.CHCQS.Model.TaskCategory", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
